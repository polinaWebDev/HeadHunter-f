// This file is auto-generated by @hey-api/openapi-ts

export type UserDto = {
    /**
     * ID пользователя
     */
    id: number;
    /**
     * Email пользователя
     */
    email: string;
    /**
     * Имя пользователя
     */
    firstName: string;
    /**
     * Фамилия пользователя
     */
    lastName: string;
    /**
     * Тип профиля
     */
    profile_type: 'employer' | 'job_seeker';
    /**
     * Аватарка пользователя
     */
    avatar_url?: string;
};

export type RegisterDto = {
    /**
     * Email пользователя
     */
    email: string;
    /**
     * Пароль пользователя
     */
    password: string;
    /**
     * Имя пользователя
     */
    firstName: string;
    /**
     * Фамилия пользователя
     */
    lastName: string;
    /**
     * Тип профиля
     */
    profile_type: 'employer' | 'job_seeker';
    /**
     * Аватарка пользователя (файл)
     */
    avatar_url?: string;
};

export type RefreshToken = {
    /**
     * Entity ID
     */
    id: number;
    /**
     * Entity creation date
     */
    createdAt: string;
    /**
     * Entity last update date
     */
    updatedAt: string;
    userId: number;
    token: string;
};

export type User = {
    /**
     * Entity ID
     */
    id: number;
    /**
     * Entity creation date
     */
    createdAt: string;
    /**
     * Entity last update date
     */
    updatedAt: string;
    /**
     * user`s email
     */
    email: string;
    /**
     * user`s password
     */
    password: string;
    /**
     * user`s firstname
     */
    firstName: string;
    /**
     * user`s lastname
     */
    lastName: string;
    /**
     * user`s profile type
     */
    profile_type: string;
    /**
     * user`s avatar
     */
    avatar_url: string;
    refreshToken: RefreshToken;
};

export type RegisterResponse = {
    /**
     * JWT access token
     */
    token: string;
    /**
     * User returned after successful registration
     */
    user: User;
};

export type LoginDto = {
    /**
     * Email пользователя
     */
    email: string;
    /**
     * Пароль пользователя
     */
    password: string;
};

export type LoginResponse = {
    /**
     * JWT access token
     */
    token: string;
    /**
     * User data returned after successful registration
     */
    user: UserDto;
};

export type CreateCompanyDto = {
    /**
     * company name
     */
    name: string;
    /**
     * company description
     */
    description: string;
    /**
     * company avatar
     */
    logo_url: string | null;
};

export type Company = {
    /**
     * Entity ID
     */
    id: number;
    /**
     * Entity creation date
     */
    createdAt: string;
    /**
     * Entity last update date
     */
    updatedAt: string;
    /**
     * company name
     */
    name: string;
    /**
     * company description
     */
    description: string;
    /**
     * company avatar
     */
    avatar_url: string | null;
    /**
     * 1
     */
    ownerId: User;
    /**
     * company members
     */
    members: Array<CompanyMember>;
};

export type CompanyMember = {
    /**
     * Entity ID
     */
    id: number;
    /**
     * Entity creation date
     */
    createdAt: string;
    /**
     * Entity last update date
     */
    updatedAt: string;
    /**
     * user
     */
    user: User;
    /**
     * company
     */
    company: Company;
    /**
     * company role
     */
    role: string;
};

export type UserControllerGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me';
};

export type UserControllerGetMeErrors = {
    /**
     * Пользователь не авторизован
     */
    401: unknown;
};

export type UserControllerGetMeResponses = {
    /**
     * Получение профиля пользователя
     */
    200: UserDto;
};

export type UserControllerGetMeResponse = UserControllerGetMeResponses[keyof UserControllerGetMeResponses];

export type AuthControllerRegisterData = {
    body: RegisterDto;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type AuthControllerRegisterResponses = {
    /**
     * Successful registration
     */
    201: RegisterResponse;
};

export type AuthControllerRegisterResponse = AuthControllerRegisterResponses[keyof AuthControllerRegisterResponses];

export type AuthControllerLoginData = {
    body: LoginDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthControllerLoginResponses = {
    /**
     * Successful login
     */
    201: LoginResponse;
};

export type AuthControllerLoginResponse = AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type AuthControllerLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type AuthControllerLogoutResponses = {
    /**
     * Successful logout
     */
    201: unknown;
};

export type AuthControllerRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type AuthControllerRefreshResponses = {
    /**
     * Successful token refresh
     */
    201: LoginResponse;
};

export type AuthControllerRefreshResponse = AuthControllerRefreshResponses[keyof AuthControllerRefreshResponses];

export type CompanyControllerRegisterCompanyData = {
    body: CreateCompanyDto;
    path?: never;
    query?: never;
    url: '/company/create';
};

export type CompanyControllerRegisterCompanyResponses = {
    /**
     * Создание компании
     */
    200: Company;
};

export type CompanyControllerRegisterCompanyResponse = CompanyControllerRegisterCompanyResponses[keyof CompanyControllerRegisterCompanyResponses];

export type CompanyControllerUpdateCompanyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/company/update';
};

export type CompanyControllerUpdateCompanyResponses = {
    /**
     * Обновление компании
     */
    200: Company;
};

export type CompanyControllerUpdateCompanyResponse = CompanyControllerUpdateCompanyResponses[keyof CompanyControllerUpdateCompanyResponses];

export type CompanyControllerGetCompanyData = {
    body?: never;
    path: {
        companyId: number;
    };
    query?: never;
    url: '/company/details/{companyId}';
};

export type CompanyControllerGetCompanyResponses = {
    /**
     * Получение компании по ид
     */
    200: Company;
};

export type CompanyControllerGetCompanyResponse = CompanyControllerGetCompanyResponses[keyof CompanyControllerGetCompanyResponses];

export type CompanyControllerInviteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/company/invite';
};

export type CompanyControllerInviteResponses = {
    /**
     * Получение компаний пользователя
     */
    200: CompanyMember;
};

export type CompanyControllerInviteResponse = CompanyControllerInviteResponses[keyof CompanyControllerInviteResponses];

export type CompanyControllerChangeRoleData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/company/change-role';
};

export type CompanyControllerChangeRoleResponses = {
    /**
     * Изменение роли пользователя
     */
    200: CompanyMember;
};

export type CompanyControllerChangeRoleResponse = CompanyControllerChangeRoleResponses[keyof CompanyControllerChangeRoleResponses];

export type CompanyControllerGetMyCompanyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/company/my';
};

export type CompanyControllerGetMyCompanyResponses = {
    /**
     * Получение всех компаний пользователя
     */
    200: Array<Company>;
};

export type CompanyControllerGetMyCompanyResponse = CompanyControllerGetMyCompanyResponses[keyof CompanyControllerGetMyCompanyResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:3002' | (string & {});
};