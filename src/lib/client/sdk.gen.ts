// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { UserControllerGetMeData, UserControllerGetMeResponse, AuthControllerRegisterData, AuthControllerRegisterResponse, AuthControllerLoginData, AuthControllerLoginResponse, AuthControllerLogoutData, AuthControllerRefreshData, AuthControllerRefreshResponse, CompanyControllerRegisterCompanyData, CompanyControllerRegisterCompanyResponse, CompanyControllerUpdateCompanyData, CompanyControllerUpdateCompanyResponse, CompanyControllerGetCompanyData, CompanyControllerGetCompanyResponse, CompanyControllerInviteData, CompanyControllerInviteResponse, CompanyControllerChangeRoleData, CompanyControllerChangeRoleResponse, CompanyControllerGetMyCompanyData, CompanyControllerGetMyCompanyResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const userControllerGetMe = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserControllerGetMeResponse, unknown, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

export const authControllerRegister = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerRegisterResponse, unknown, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authControllerLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerLoginResponse, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authControllerLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

export const authControllerRefresh = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerRefreshResponse, unknown, ThrowOnError>({
        url: '/auth/refresh',
        ...options
    });
};

export const companyControllerRegisterCompany = <ThrowOnError extends boolean = false>(options: Options<CompanyControllerRegisterCompanyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompanyControllerRegisterCompanyResponse, unknown, ThrowOnError>({
        url: '/company/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const companyControllerUpdateCompany = <ThrowOnError extends boolean = false>(options?: Options<CompanyControllerUpdateCompanyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompanyControllerUpdateCompanyResponse, unknown, ThrowOnError>({
        url: '/company/update',
        ...options
    });
};

export const companyControllerGetCompany = <ThrowOnError extends boolean = false>(options: Options<CompanyControllerGetCompanyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CompanyControllerGetCompanyResponse, unknown, ThrowOnError>({
        url: '/company/details/{companyId}',
        ...options
    });
};

export const companyControllerInvite = <ThrowOnError extends boolean = false>(options?: Options<CompanyControllerInviteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompanyControllerInviteResponse, unknown, ThrowOnError>({
        url: '/company/invite',
        ...options
    });
};

export const companyControllerChangeRole = <ThrowOnError extends boolean = false>(options?: Options<CompanyControllerChangeRoleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompanyControllerChangeRoleResponse, unknown, ThrowOnError>({
        url: '/company/change-role',
        ...options
    });
};

export const companyControllerGetMyCompany = <ThrowOnError extends boolean = false>(options?: Options<CompanyControllerGetMyCompanyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CompanyControllerGetMyCompanyResponse, unknown, ThrowOnError>({
        url: '/company/my',
        ...options
    });
};